frameworkVersion: ">=1.2.0 <2.0.0"

service: lambda-image-2

custom:
  BUCKET:
  DYNAMO:
  S3_ACCESS_KEY_ID:
  S3_SECRET_ACCESS_KEY:

  AUTH0_CLIENT_ID:
  AUTH0_CLIENT_SECRET:
  AUTH0_DOMAIN:

provider:
  name: aws
  runtime: nodejs4.3
  cfLogs: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

package:
 include:
   - ../node_modules/**

functions:
  createThumbnail:
    handler: handler.createThumbnail
    environment:
      BUCKET: ${self:custom.BUCKET}
      DYNAMO: ${self:custom.DYNAMO}
    events:
      - s3:
          bucket: ${self:custom.BUCKET}
          event: s3:ObjectCreated:*
          # rules:
          #   - prefix: images/

  updateDescription:
    handler: handler.updateDescription
    environment:
      DYNAMO: ${self:custom.DYNAMO}
    events:
      - http:
          path: updateDescription
          method: post
          cors: true

  upload:
    handler: handler.getSignedUrl
    environment:
      BUCKET: ${self:custom.BUCKET}
      S3_ACCESS_KEY_ID: ${self:custom.S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${self:custom.S3_SECRET_ACCESS_KEY}

    events:
      - http:
          path: upload
          method: get
          cors: true
  public:
    handler: handler.publicEndpoint
    events:
      - http:
          path: public
          method: get
          cors: true
  generateAlbum:
    handler: handler.generateAlbum
    environment:
      BUCKET: ${self:custom.BUCKET}
      S3_ACCESS_KEY_ID: ${self:custom.S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${self:custom.S3_SECRET_ACCESS_KEY}
      DYNAMO: ${self:custom.DYNAMO}
    events:
      - http:
          path: generateAlbum
          method: post
          cors: true
  private:
    handler: handler.privateEndpoint
    events:
      - http:
          path: private
          method: get
          authorizer: authFn
          cors: true
  authFn:
    handler: handler.auth


resources:
  Resources:
    # Have to take this out for now as subscribing to s3 events create a bucket of their own
    # ImageBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:custom.BUCKET}
    #     AccessControl: Private
    #     CorsConfiguration:
    #       CorsRules:
    #         - AllowedHeaders:
    #             - "*"
    #           AllowedMethods:
    #             - PUT
    #             - GET
    #           AllowedOrigins:
    #             - "*"     
    ImageMetadataTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.DYNAMO}
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

frameworkVersion: ">=1.2.0 <2.0.0"

service: lambda-image-2

custom:
  BUCKET:
  THUMBNAIL_BUCKET:
  DYNAMO:
  COLLECTION_TABLE:
  S3_ACCESS_KEY_ID:
  S3_SECRET_ACCESS_KEY:
  AUTH0_CLIENT_ID:
  AUTH0_CLIENT_SECRET:
  AUTH0_DOMAIN:

provider:
  name: aws
  runtime: nodejs4.3
  cfLogs: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

package:
 include:
   - ../node_modules/**

functions:
  createThumbnail:
    handler: handler.createThumbnail
    environment:
      BUCKET: ${self:custom.BUCKET}
      THUMBNAIL_BUCKET: ${self:custom.THUMBNAIL_BUCKET}
      DYNAMO: ${self:custom.DYNAMO}
    events:
      - s3:
          bucket: ${self:custom.BUCKET}
          event: s3:ObjectCreated:*
          # rules:
          #   - prefix: images/
  updateDescription:
    handler: handler.updateDescription
    environment:
      DYNAMO: ${self:custom.DYNAMO}
    events:
      - http:
          path: updateDescription
          method: post
          cors: true
  generateAlbum:
    handler: handler.generateAlbum
    environment:
      BUCKET: ${self:custom.BUCKET}
      S3_ACCESS_KEY_ID: ${self:custom.S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${self:custom.S3_SECRET_ACCESS_KEY}
      DYNAMO: ${self:custom.DYNAMO}
      COLLECTION_TABLE: ${self:custom.COLLECTION_TABLE}
    events:
      - http:
          path: generateAlbum
          method: post
          cors: true
  collectionStatusTwo:
    handler: handler.checkCollectionStatus
    environment:
      DYNAMO: ${self:custom.DYNAMO}
      COLLECTION_TABLE: ${self:custom.COLLECTION_TABLE}
    events:
      - http:
          path: collection/{id}/status
          method: get
          cors: true
  getCollectionContents:
    handler: handler.getCollectionContents
    environment:
      DYNAMO: ${self:custom.DYNAMO}
      COLLECTION_TABLE: ${self:custom.COLLECTION_TABLE}
    events:
      - http:
          path: collection/{id}/entries
          method: get
          cors: true
  authFn:
    handler: handler.auth


resources:
  Resources:
    # Have to take this out for now as subscribing to s3 events create a bucket of their own
    ImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.THUMBNAIL_BUCKET}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT
                - GET
              AllowedOrigins:
                - "*"     
    ImageMetadataTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.DYNAMO}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CollectionMetadataTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.COLLECTION_TABLE}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
